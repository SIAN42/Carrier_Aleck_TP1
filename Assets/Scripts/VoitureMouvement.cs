//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/VoitureMouvement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VoitureMouvement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VoitureMouvement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VoitureMouvement"",
    ""maps"": [
        {
            ""name"": ""Voiture"",
            ""id"": ""7d7c75f9-7a9b-4e30-8360-4fa2d9f37673"",
            ""actions"": [
                {
                    ""name"": ""Bouge"",
                    ""type"": ""Value"",
                    ""id"": ""d1863283-0bde-4625-bdb9-bb06541e0966"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10332fb6-3ed8-4581-9eca-287664f76a69"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bouge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01231ce9-1234-4f37-be25-4b54ff037958"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bouge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f20881e-e2a7-464b-b805-72644b339e00"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bouge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c0d5fa0-2d38-4af4-9eda-5ecd42402a27"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bouge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""707504de-4665-443e-80e7-ce111c11c7f1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bouge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Voiture
        m_Voiture = asset.FindActionMap("Voiture", throwIfNotFound: true);
        m_Voiture_Bouge = m_Voiture.FindAction("Bouge", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Voiture
    private readonly InputActionMap m_Voiture;
    private List<IVoitureActions> m_VoitureActionsCallbackInterfaces = new List<IVoitureActions>();
    private readonly InputAction m_Voiture_Bouge;
    public struct VoitureActions
    {
        private @VoitureMouvement m_Wrapper;
        public VoitureActions(@VoitureMouvement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Bouge => m_Wrapper.m_Voiture_Bouge;
        public InputActionMap Get() { return m_Wrapper.m_Voiture; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VoitureActions set) { return set.Get(); }
        public void AddCallbacks(IVoitureActions instance)
        {
            if (instance == null || m_Wrapper.m_VoitureActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VoitureActionsCallbackInterfaces.Add(instance);
            @Bouge.started += instance.OnBouge;
            @Bouge.performed += instance.OnBouge;
            @Bouge.canceled += instance.OnBouge;
        }

        private void UnregisterCallbacks(IVoitureActions instance)
        {
            @Bouge.started -= instance.OnBouge;
            @Bouge.performed -= instance.OnBouge;
            @Bouge.canceled -= instance.OnBouge;
        }

        public void RemoveCallbacks(IVoitureActions instance)
        {
            if (m_Wrapper.m_VoitureActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVoitureActions instance)
        {
            foreach (var item in m_Wrapper.m_VoitureActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VoitureActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VoitureActions @Voiture => new VoitureActions(this);
    public interface IVoitureActions
    {
        void OnBouge(InputAction.CallbackContext context);
    }
}
